define(["angular"],function(e){var t=e.module("bg.selector",[]);t.directive("bgSelector",["$document","$parse",function(t,l){var n=function(e,t){t=t||[];for(var l=t.length,n=0;l>n;n++){var o=t[n];if(o===e)return!0}return!1};return{scope:{},controller:["$scope","$element","$attrs","$transclude",function(e,t,l,n){var o=this;o.options=[],o.open=!1,o.hideChoiceList=function(){o.open=!1},o.toggleChoiceList=function(){o.open=!o.open},o.setSelectorLabel=function(e){o.label=e},o.addOption=function(e){o.options.push(e)}}],controllerAs:"selector",require:["bgSelector","ngModel"],restrict:"E",template:function(e,t){t.ngModel;return'<div class="bg-selector-container"><div class="bg-selector-bar"><div class="bg-selector-content" ng-bind-template="{{selector.label}}"></div><div class="bg-selector-icon" ng-class="{true: \'open\'}[selector.open]"></div></div><div class="bg-choice-list" ng-show="selector.open"></div></div>'},replace:!0,transclude:!0,link:function(o,c,a,i,r){var s=i[0],u=i[1],b=a.placeholder||"请选择",p=e.element(c[0].querySelector(".bg-choice-list")),d=e.element(c[0].querySelector(".bg-selector-bar"));s.onSelectCallback=l(a.onSelect)(o.$parent),d.bind("click",function(e){s.toggleChoiceList(),o.$apply(),e.stopPropagation()}),t.bind("click",function(e){s.open&&s.hideChoiceList(),o.$apply()}),o.$parent.$watch(a.ngModel,function(e){n(e,s.options)?o.$broadcast("bgs:change",e):s.setSelectorLabel(b)}),s.setValue=function(e,t){u.$setViewValue(e),s.setSelectorLabel(t)},s.getValue=function(){return u.$modelValue},s.clearValue=function(){u.$setViewValue(null),s.setSelectorLabel(b)},r(function(e){p.append(e)}),s.setSelectorLabel(b)}}}]),t.directive("bgOption",["$parse",function(t){return{priority:-1,controller:["$scope","$element","$attrs","$transclude",function(e,l,n,o){var c=this;c.value=t(n.value)(e),c.label=t(n.label)(e)}],controllerAs:"option",require:["bgOption","^bgSelector"],restrict:"E",template:'<div class="bg-selector-choice"></div>',replace:!0,transclude:!0,link:function(t,l,n,o,c){var a=o[0],i=o[1];l.bind("click",function(){var e=a.value,t=a.label;t||(t="请选择"),i.setValue(e,t),i.hideChoiceList(),i.onSelectCallback&&i.onSelectCallback(e,t)}),e.equals(a.value,i.getValue())&&i.setSelectorLabel(a.label),t.$on("bgs:change",function(e,t){t===a.value&&i.setSelectorLabel(a.label)}),i.addOption(a.value),t.$watch(n.value,function(e,t){t&&e!==t&&(a.value=e,i.clearValue())}),t.$watch(n.label,function(e,t){t&&e!==t&&(a.label=e,i.clearValue())}),c(function(e){l.append(e)})}}}])});
//# sourceMappingURL=data:application/json;base64,
